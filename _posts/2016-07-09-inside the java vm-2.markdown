---
layout: post
title:  "深入java虚拟机-2 JVM"
date:   2016-07-09 10:33:20 +0800
categories: java
tags:
- learn
- java
---

当说道“Java虚拟机”时，可能指的是如下三种不同的东西：

- 抽象规范
- 一个具体的实现
- 一个运行中的虚拟机实例

每个Java程序都运行于“一个运行中的虚拟机实例”上，该虚拟机实例是“抽象规范”的“一个具体的实现”。

## 1 Java虚拟机的生命周期

当启动一个Java程序时，一个虚拟机实例就诞生了。

当该程序关闭退出，这个虚拟机实例也随之消亡。

## 2 Java虚拟机的体系结构

![inside-jvm-2](/public/img/2016-07-09-inside-jvm2.gif)

 一个线程创建时，会分配一个**PC寄存器**和一个**Java栈**

**Java栈**由许多**栈桢**组成，一个栈桢包含一个Java方法调用的状态。当线程调用一个Java方法时，虚拟机压入一个新的栈桢到该线程的Java栈中；当该方法返回时，这个栈桢被从Java栈中弹出并抛弃。

### 2.1 Java虚拟机中的数据类型

![inside-jvm-2](/public/img/2016-07-09-inside-jvm3.gif)

编译器把Java源码编译为字节码时，会用int或byte来表示boolean；
和Java语言一样，Java虚拟机的基本类型的值域在任何平台都是一致的，如long始终是64位二进制补码表示的有符号整数；
returnAddress这个类型，Java程序员不能使用，它被用于实现Java程序中的finally子句；

### 2.2 类装载器子系统

Java虚拟机有两种类装载器：启动类装载器（Java虚拟机实现的一部分）和用户自定义类装载器（Java程序的一部分）。

负责查找并装载类型。

- 定位和导入二进制class文件
- 验证被导入类的正确性
- 为变量分配并初始化内存
- 帮助解析符号引用。

执行顺序：

1. 装载： 查找并装载类型的二进制数据
2. 连接： 执行验证、准备和解析（可选）
      - 验证： 确保被导入类型的正确性
      - 准备： 为类变量分配内存，并将其初始化为默认值
      - 解析： 把类型中的符号引用转化为直接引用
3. 初始化： 把类变量初始化为正确初始值
