---
layout: post
title:  "Microservices"
date:   2016-12-25 21:56:20 +0800
categories: design
tags:
- learn
- microservices
- design
---

*微服务的代码多小才算小？——足够小。换句话说，如果不再感觉代码库过大，可能它就足够小了。*

*服务越小，微服务架构带来点优点和缺点就越明显。服务越小，独立性带来点好处就越多，但是管理大量服务也为越复杂。*

*与IT架构师更好地类比的传统角色不是建筑师，而是城市规划师。架构师的职责之一就是保证该系统适合开发人员在其上工作。架构师要保证在这个系统上工作的开发者和使用这个系统的用户一样开心。*

*架构师应该关心各个服务之间的交互，而不要太关注服务内部自己的事情。*

*规则对于智者来说说指导，对于愚者来说是遵从。*

#### 1. 集成系统的方式

编排与协同（me：君主制与明主制）

##### 1.1 共享数据库

##### 1.2 使用RPC（远程调用）

##### 1.3 使用REST



--------

**<a href='https://12factor.net/zh_cn/' target='_black'>12-factors</a>**

##### I. 基准代码

一份基准代码，多份部署

##### II. 依赖

显式声明依赖关系

##### III. 配置

在环境中存储配置

##### IV. 后端服务

把后端服务当作附加资源

##### V. 构建，发布，运行

严格分离构建和运行

##### VI. 进程

以一个或多个无状态进程运行应用

##### VII. 端口绑定

通过端口绑定提供服务

##### VIII. 并发

通过进程模型进行扩展

##### IX. 易处理

快速启动和优雅终止可最大化健壮性

##### X. 开发环境与线上环境等价

尽可能的保持开发，预发布，线上环境相同

##### XI. 日志

把日志当作事件流

##### XII. 管理进程

后台管理任务当作一次性进程运行