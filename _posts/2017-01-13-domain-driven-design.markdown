---
layout: post
title:  "领域驱动设计"
date:   2016-12-25 21:56:20 +0800
categories: design
tags:
- learn
- ddd
- Eric Evans
---

**领域专家**与**开发人员**要经常沟通交流。

知识消化

要严格按照模型来编写代码。

软件开发是不断精化模型、设计和代码统一的过程。

要使用概念，就清晰地定义它，不要只是在代码逻辑中包涵它。

##### 1. 模式：Ubiquitous Language

**通用语言**

##### 2. 模式：Model-Driven Design

**模型驱动设计**

##### 3. 模式：Hands-On Modeler

**建模人员参与开发**

##### 4. 模式：Layered Architecture

**分层架构**

分层架构的基本原则是，层中的任何元素都仅依赖于本层的其他元素或下层的元素，向上的通信必须通过间接的传递机制进行。

大多是成功的架构都包括下面四个概念层的某个版本：

- *用户界面层*：负责像用户显示信息和解释用户指令。这里的用户可以是另一个计算机系统，而不一定是人
- *应用层*：定义软件要完成的任务，并只会表达领域概念的对象来解决问题。应用层要尽量简单，不包含业务规则或知识，而只为下一层中的领域对象协调任务，分配工作，使他们互相写作。
- *领域层*：业务软件的核心。负责表达业务概念、业务状态信息及业务规则。尽管保存业务状态的技术细节是由基础设施层实现的，但反映业务情况的状态是由本层控制并使用的。
- *基础设施层*：为上面各层提供通用的技术能力：为应用层传递消息，为领域层提供持久化机制，为用户界面绘制屏幕组件，等。

将*领域层*分离出来才是实现Model-Driven Design的关键。

**领域对象应该将重点放在如何表达领域模型上，而不需要考虑自己的显示和存储问题，也无需管理应用任务等内容。**