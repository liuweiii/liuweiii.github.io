---
layout: post
title:  "大型网站技术架构"
date:   2016-08-25 15:12:20 +0800
categories: design
tags:
- learn
- architecture
---


## 1. 大型网站架构模式

### 1.1. 分层

将系统在横向维度上切分，通过上层对下层的依赖调用组成完整系统。

**应用层** 负责具体业务和视图展示，如网站首页及搜索输入和结果展示

**服务层** 为应用层提供服务支持，如用户管理服务

**数据层** 提供数据存储访问服务，如数据库、缓存、文件、搜索引擎

在网站规模还很小的时候就应该采用分层架构，这样将来网站做大时才能有更好地应对。

### 1.2. 分割

将系统在纵向维度上切分，将不同功能和服务分割开来，包装成高内聚低耦合的模块单元。比如在应用层，将不同业务分割，如购物车、论坛、搜索分割成不同的应用。

### 1.3. 分布式

分层和分割的一个主要目的是为了切分后的模块便于分布式部署，即将不同模块部署在不同服务器上，通过远程调用协同工作。分布式在解决高并发的同时也带来了其他问题：服务调用通过网络会影响性能；服务器多，宕机的概率也大，降低可用性；数据在分布式环境保持一致性困难。因此要根据具体情况而行，不要为了分布式而分布式。

### 1.4. 集群

将独立部署的服务器集群化，即多台服务器部署相同应用构成一个集群，通过负载均衡设备共同对外提供服务。可以提供更好的并发特性。

### 1.5. 缓存

缓存就是将数据放在距离计算最近的位置以加快处理速度。

**CDN** 内容分发网络。部署在距离终端用户最近的网络服务商，用户的网络请求总是先到达他的网络服务商那里，在这里缓存网站的一些静态资源，就可以就近以最快速度返回给用户。

**反向代理** 属于网站前端架构的一部分，部署在网站的前端，用户请求到达网站的数据中心时，最先访问到的就是反向代理服务器，可以在这里缓存网站静态资源。

**本地缓存** 在应用服务器本地缓存热点数据，应用程序在本机内存中直接访问数据，无需访问数据库。

**分布式缓存** 大型网站数据量非常庞大，即使只缓存一小部分，需要的内存空间也不是单机能承受的，所以除了本地缓存，还需要分布式缓存，将数据缓存在一个专门的分布式缓存集群中，应用程序通过网络通信访问缓存数据。

使用缓存有两个前提条件：
数据访问热点不均衡，某些数据会被更频繁访问，应该放在缓存中；数据在某个时间段内有效，不会很快过期，否则缓存的数据就会因已经失效而产生脏读。

### 1.6. 异步

单一服务器内部可通过多线程共享内存队列实现异步；分布式系统中多个服务器集群通过分布式消息队列实现异步，分布式消息队列可以看作内存队列的分布式部署。

### 1.7. 冗余

通过冗余实现服务高可用。

### 1.8. 自动化

大型网站的自动化架构设计主要集中在发布运维方面。减少人为干预，能减少故障发生。

### 1.9. 安全

## 2. 大型网站架构要素

### 2.1. 高性能

衡量网站性能的指标：响应时间、TPS、系统性能计数器等。

- 浏览器端，可以通过浏览器缓存、使用页面压缩、合理布局页面、减少cookie传输、使用CDN和反向代理缓存静态内容。
- 应用服务器端，使用服务器本地缓存和分布式缓存，通过缓存在内存中的热点数据处理用户请求。通过异步操作，加快请求响应。使用多线程、改善内存管理等手段优化性能。
- 数据库服务器端，索引、缓存、SQL优化等手段，或使用NoSQL。

### 2.2. 高可用

#### 2.2.1. 应用高可用

应用层主要处理网站应用的业务逻辑，应该具备无状态性，这样所有服务器完全对等，任意一台或多台宕机，请求提交给集群中其他任意一台可用机器处理即可。通过负载均衡实现应用服务器集群中服务器的可用状态实时监测、自动转移失败任务。

*实际情况下，业务总是有状态的，如session*

应用服务器集群的session管理有以下几种手段：
**session复制**
在集群中的服务器之间同步session，使每台机器上都保存有用户的session信息。这种方法简单快速，但只适合小集群下使用，大集群下session复制会消耗大量资源，增加系统负担。

**session绑定**
可以利用负载均衡的源地址hash算法，使同一个IP的请求分发到同一台服务器上，但这样一台机器挂了，该机器上的session也不存在了。

**使用cookie记录session**
这种方法是将session积累在客户端（浏览器），受cookie大小、用户设置的限制，因此网站可以考虑按重要性来使用cookie积累session。

**session服务器**
使用独立部署的session服务器（集群）统一管理session，应用服务器每次读写session时，都访问session服务器。

#### 2.2.2. 服务高可用

可复用的服务也应该是无状态的，使用负载均衡的失效转移策略实现高可用。

实践中，还有以下几点高可用的服务策略：

**分级管理** 运维上将核心应用和服务用更好的硬件部署、隔离。

**超时设置** 由于服务器宕机、线程死锁等原因，可能导致应用程序对服务端的调用失去响应，但同时还占用应用程序资源。在应用程序中设置服务调用的超时时间，一旦超时，可选择继续重试或将请求转移到提供相同服务的其他服务器上。

**异步调用** 避免一个服务失败导致整个应用请求失败。

**服务降级** 为保障核心应用和功能的正常运行，必要时可以对服务降级。降级有两种手段：
- 拒绝服务：拒绝优先级低的应用的调用，确保核心应用正常使用；或随机拒绝部分请求调用，节约资源，避免大家一起死的惨剧
- 关闭功能： 关闭部分不重要的服务或服务内部关闭部分不重要的功能。

**幂等性设计** 某些操作重复收到请求不能重复进行。

#### 2.2.3. 数据高可用

**CAP原理** 一个提供数据服务的存储系统无法同时满足：数据一致性（Consistency）、数据可用性（Availability）、伸缩性（Patition Tolerance）。

保证数据存储高可用的手段：

**数据备份** 保证数据有多个副本，任意副本失效不会导致数据丢失

**失效转移机制** 保证当一个数据副本不可访问时，可以快速切换访问数据的其他副本，保证系统可用。

### 2.3 伸缩性

实现负载均衡的基础技术：

1.**HTTP重定向**

![web-architecture](/public/img/2016-08-25-web-architecture-load-balance-http.png)

优点：实现简单；

缺点：浏览器要请求两次服务器才能完成一次访问，性能较差；重定向服务器是瓶颈；使用HTTP302响应码重定向，有可能被搜索引擎判为SEO作弊。

2.**DNS域名解析负载均衡**

![web-architecture](/public/img/2016-08-25-web-architecture-load-balance-dns.png)

优点：将负载均衡的工作转交给DNS，省掉了网站管理维护负载均衡服务器的麻烦；DNS还支持基于地理位置的域名解析，会将域名解析成距离用户地理最近的一个服务器地址，这样可加快用户访问速度，改善性能；

缺点：DNS是多级解析，每一级DNS都可能缓存记录，当下线某台服务器后，DNS生效时间较长，DNS依然可能解析到已下线的服务器导致访问失败；DNS负载均衡控制权在域名服务商那里，网站无法对其做更多改善和更强大的管理。

大型网站总是部分使用DNS域名解析，作为第一级负载均衡手段，即域名解析得到的服务器是同样提供负载均衡的内部服务器，由这些内部服务器再负载均衡到真实的服务器上。

3.**反向代理负载均衡**

![web-architecture](/public/img/2016-08-25-web-architecture-load-balance-reverse-proxy.png)

优点：将反向代理服和负载均衡功能集成在一起，部署简单

缺点：反向代理服务器是所有请求和响应的中转站，性能可能会成为瓶颈

4.**IP负载均衡**

![web-architecture](/public/img/2016-08-25-web-architecture-load-balance-ip.png)

负载均衡服务器修改请求的目的IP为内部IP，响应的源IP为负载均衡器的IP。

IP负载均衡在内核进程完成数据分发，较反向代理负载均衡有更好的处理性能，但是所有请求响应都要进过负载均衡服务器，负载均衡器成为瓶颈。

5.**数据链路层负载均衡**

![web-architecture](/public/img/2016-08-25-web-architecture-load-balance-mac.png)

指在通信协议的数据链路层修改mac地址进行负载均衡，又叫直接路由方式（DR）或三角传输模式。

是目前大型网站使用最广的一种负载均衡手段，Linux平台上最好的链路层负载均衡开源产品是LVS（Linux Virtual Server）。

