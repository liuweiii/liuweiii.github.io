---
layout: post
title:  "Kafka的设计"
date:   2018-03-01 21:24:20 +0800
categories: MQ
tags:
- learn
- kafka
---
## 1.持久化

kafka使用文件系统来存储和缓存消息。通常人们认为磁盘是很慢的（相对于内存之类的来说）。其实磁盘可能比人们预期的要更慢、或者更快——这要看怎么使用了。设计得当的磁盘结构通常可以和网络一样快。如今，顺序访问硬盘比随机访问硬盘快6000倍左右，甚至有时候比随机访问内存还快。

kafka是运行在JVM上的，使用过java的人都知道：

1. 对象的内存开销非常高，通常会使存储的数据的大小增加一倍(或者更糟)。
2. 随着堆内数据的增多，GC会越来越慢。

**因此，kafka的消息是直接存储在文件系统，而不是内存。**

kafka的持久化队列是建立在简单的读和追加到文件这种机制上的。这种机制的时间复杂度是O(1)，因为读写不会互相影响，也与数据大小无关。

## 2.效率

影响效率的主要有两方面：过多的小I/O操作和过多的字节拷贝。

1. 小IO的问题发生在客户端和服务器之间，以及服务器自身的持久化操作上。kafka通过“消息集”的方式来解决这个问题：kafka一次发送多个消息，而不是一个消息，这样可以分摊网络开销；另一方面，服务器会一次将消息块添加到日志中，消费者每次获取线性的一批数据。
2. 关于字节拷贝，kafka通过在生产者、broker、消费者之间使用标准化的二进制消息格式来解决（这样消息在这些模块之间传输的时候就不需要转换了）。

broker上的消息本身就是一个目录下的一堆文件，这些文件的存储格式是跟生产者、消费者一样的。这样broker可以利用操作系统优化后的系统调用直接将文件发送到socket上。linux上使用sendfile这个系统调用来实现的。

通常将本地文件传输到socket时，数据会经过下面的4个步骤：

1. 操作系统从磁盘读取数据到内核空间的pagecache里；
2. 应用程序从内核空间读取数据到用户空间的buffer中；
3. 应用程序将数据写入内核空间的socket buffer中；
4. 操作系统将数据从socket buffer中拷贝到网卡缓冲区。

使用sendfile系统调用，操作系统会将pagecache里的数据直接发送到网卡，即所谓的“零拷贝”。“零拷贝”还有个好处，读到pagecache的数据可以被多个consumer消费，而不需要每个consumer消费的时候都读一次。

有时性能瓶颈不在CPU或磁盘，而是在网络带宽。kafka可以将批量的消息压缩后发送，这些压缩后的消息会以被压缩后的格式存储，而且只有消费者才回去解压它们。

总结一下：

1. **消息集**减少过多的小IO

2. **标准二进制格式**减少转换时的字节拷贝

3. **零拷贝**减少文件发送到网络时的转换

4. **端到端的批量压缩**减少网络带宽。

## 3.生产者

kafka的生产者是主动push消息到broker上的。

### 3.1 负载均衡

生产者直接将数据发送给作为对应partition leader的broker，不需要经过任何路由。kafka的所有节点都知道哪个节点是partition的leader、哪个节点是alive的。

客户端可以指定发送消息到哪个partition上。

###3.2 异步发送

kafka的生产者如果打开了批量压缩的功能，将会在内存中累积足够的消息后作为一个大的请求发送出去，可以配置累积到一个固定数目的消息或累积不操过多少毫秒。这个配置策略可以在消息的时延和吞吐量之间做一个合适的选择。

## 4.消费者

kafka的消费者是主动到broker上pull数据的。

消费者当前消费的topic对应的partition中的position是一个数字，因为一个partition只能被一个消费者group中的一个消费者使用。消费者维护这样一个数字，速度会很快，而且broker不会维护这个状态，消费者完全可以指定到以前的位置，重新消费消息。

## 5.

