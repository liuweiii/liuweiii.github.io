---
layout: post
title:  "java 线程安全的实现方法"
date:   2017-08-26 19:08:20 +0800
categories: java
tags:
- learn
- java
- thread
---

### 1. 互斥同步

**同步** 指多个线程并发访问共享数据时，同一时刻只被一个（或一些，使用信号量的时候）线程使用。
**互斥**是实现同步的一种手段，临界区、互斥量、信号量都是主要的互斥实现方式。

互斥是因，同步是果；互斥是方法，同步是目的。

使用synchronized关键字、ReentrantLock类（Semaphore、Condition、Mutex、CyclicBarrier、CountDownLatch）来实现互斥。


*CountDownLatch 是计数器, 线程完成一个就记一个, 就像 报数一样, 只不过是递减的*

*CyclicBarrier更像一个水闸, 线程执行就像水流, 在水闸处都会堵住, 等到水满(线程到齐)了, 才开始泄流*

synchronized只能实现非公平锁

ReentrantLock可以实现公平锁和非公平锁

### 2. 非阻塞同步

CAS Compare-and-Swap

### 3. 无同步方案

要保证线程安全，并不是一定就要进行同步，两者没有因果关系。 同步只是保证共享数
据争用时的正确性的手段，如果一个方法本来就不涉及共享数据，那它自然就无须任何同步
措施去保证正确性，因此会有一些代码天生就是线程安全的。

- **可重入代码**：如果一个方法，它的返回结果是可以预测的，只要输入了相同的数
据，就都能返回相同的结果，那它就满足可重入性的要求，当然也就是线程安全的。

- **线程本地存储**：如果一段代码中所需要的数据必须与其他代码共享，但这些共享数据能保证在同一个线程中执行，可以使用ThreadLocal类来实现线程本地存储的功能。